*************************************** IMPORTANT NOTES *******************************************************

* User.sync() - This creates the table if it doesn't exist (and does nothing if it already exists)
* User.sync({ force: true }) - This creates the table, dropping it first if it already existed
* User.sync({ alter: true }) - This checks what is the current state of the table in the database (which columns it has, what are their data types, etc), and then performs the necessary changes in the table to make it match the model.

timestamps:false // show created and updated time based on value
updatedAt: false // show updated time based on value
createdAt: false // show created time based on value,
engine: 'MYISAM' // change dataypes of table,
match: drop table on match condition

* Model Query
    * Sequelize provides various methods to assist querying your database for data.

* Query Finder
    1. findAll
    2. findByPk
    3. findAndCountAll
    4. findOrCreate
    5. findOne

* Getter and setter
    * get and set values of data.

* Validation and Constraints
1. Validation
    Validations are checks performed in the Sequelize level, in pure JavaScript. They can be arbitrarily complex if you provide a custom validator function, or can be one of the built-in validators offered by Sequelize. 
    If a validation fails, no SQL query will be sent to the database at all.

2. Constraints
    Constraints are rules defined at SQL level. The most basic example of constraint is an Unique Constraint. If a constraint check fails, an error will be thrown by the database and Sequelize will forward this error to JavaScript.

* Association
    1. One To One
    2. One To Many
    3. Many To One
    4. Many To Many

* RawQuery
    * Gettting data using bind query.
    
* Scopes
   Scopes are used to help you reuse code. You can define commonly used queries, specifying options such as where, include, limit, etc.